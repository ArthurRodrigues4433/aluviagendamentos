#!/bin/bash

# ================================
# Aluvi - Script de Inicializa√ß√£o Docker
# ================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warn() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log "Verificando pr√©-requisitos..."

    # Docker
    if ! command -v docker &> /dev/null; then
        error "Docker n√£o est√° instalado. Instale o Docker primeiro."
        exit 1
    fi

    # Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        error "Docker Compose n√£o est√° instalado."
        exit 1
    fi

    # Verificar vers√£o do Docker
    DOCKER_VERSION=$(docker --version | sed 's/Docker version //' | cut -d. -f1)
    if [ "$DOCKER_VERSION" -lt 20 ]; then
        warn "Docker vers√£o $DOCKER_VERSION detectada. Recomendado: 20.10+"
    fi

    log "Pr√©-requisitos OK!"
}

# Criar arquivo .env se n√£o existir
setup_environment() {
    if [ ! -f .env ]; then
        log "Criando arquivo .env..."
        cp .env.example .env
        warn "Arquivo .env criado. Configure as vari√°veis de ambiente se necess√°rio."
        warn "IMPORTANTE: Mude SECRET_KEY e senhas em produ√ß√£o!"
    else
        log "Arquivo .env j√° existe."
    fi
}

# Verificar se portas est√£o livres
check_ports() {
    log "Verificando portas..."

    local ports=(80 8000 5432 6379 9090 3000 3100)
    local occupied_ports=()

    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            occupied_ports+=($port)
        fi
    done

    if [ ${#occupied_ports[@]} -ne 0 ]; then
        warn "Portas ocupadas: ${occupied_ports[*]}"
        warn "Se houver conflitos, edite docker-compose.yml para mudar as portas."
        read -p "Continuar mesmo assim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        log "Todas as portas est√£o livres."
    fi
}

# Build e start dos servi√ßos
start_services() {
    local build_flag=""
    local detach_flag="-d"

    # Verificar se devemos fazer build
    if [ "$1" = "--build" ] || [ "$1" = "-b" ]; then
        build_flag="--build"
        log "Fazendo build dos servi√ßos..."
    fi

    # Verificar se deve rodar em foreground
    if [ "$1" = "--foreground" ] || [ "$1" = "-f" ]; then
        detach_flag=""
        log "Iniciando em foreground (pressione Ctrl+C para parar)..."
    fi

    # Comando docker-compose
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker-compose"
    else
        DOCKER_COMPOSE_CMD="docker compose"
    fi

    log "Iniciando servi√ßos com $DOCKER_COMPOSE_CMD..."
    $DOCKER_COMPOSE_CMD up $build_flag $detach_flag
}

# Aguardar servi√ßos ficarem saud√°veis
wait_for_services() {
    log "Aguardando servi√ßos ficarem prontos..."

    local services=("db" "redis" "backend")
    local max_attempts=30
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        local all_healthy=true

        for service in "${services[@]}"; do
            if ! $DOCKER_COMPOSE_CMD ps $service | grep -q "Up"; then
                all_healthy=false
                break
            fi
        done

        if $all_healthy; then
            log "Todos os servi√ßos est√£o rodando!"
            return 0
        fi

        info "Tentativa $attempt/$max_attempts - Aguardando servi√ßos..."
        sleep 10
        ((attempt++))
    done

    warn "Timeout aguardando servi√ßos. Verifique os logs:"
    warn "docker-compose logs"
    return 1
}

# Mostrar informa√ß√µes de acesso
show_access_info() {
    log "üéâ Servi√ßos iniciados com sucesso!"
    echo
    info "üì± Acesse a aplica√ß√£o:"
    echo "   Frontend (SPA):     http://localhost"
    echo "   API Docs:           http://localhost/api/docs"
    echo "   Health Check:       http://localhost/health"
    echo
    info "üìä Monitoramento:"
    echo "   Grafana:            http://localhost:3000 (admin/admin)"
    echo "   Prometheus:         http://localhost:9090"
    echo "   Loki (Logs):        http://localhost:3100"
    echo
    info "üóÑÔ∏è Banco de dados:"
    echo "   PostgreSQL:         localhost:5432"
    echo "   Redis:              localhost:6379"
    echo
    info "üîß Comandos √∫teis:"
    echo "   Ver logs:           docker-compose logs -f [servi√ßo]"
    echo "   Parar tudo:         docker-compose down"
    echo "   Reset banco:        docker-compose down -v && $0"
    echo
    warn "‚ö†Ô∏è  IMPORTANTE: Configure senhas seguras em produ√ß√£o!"
    warn "‚ö†Ô∏è  Primeiro acesso pode demorar devido ao build inicial."
}

# Fun√ß√£o principal
main() {
    echo "üöÄ Aluvi - Sistema de Agendamentos"
    echo "=================================="
    echo

    # Verificar argumentos
    case "${1:-}" in
        "stop")
            log "Parando servi√ßos..."
            $DOCKER_COMPOSE_CMD down
            log "Servi√ßos parados."
            exit 0
            ;;
        "restart")
            log "Reiniciando servi√ßos..."
            $DOCKER_COMPOSE_CMD restart
            log "Servi√ßos reiniciados."
            exit 0
            ;;
        "logs")
            $DOCKER_COMPOSE_CMD logs -f "${2:-}"
            exit 0
            ;;
        "status")
            $DOCKER_COMPOSE_CMD ps
            exit 0
            ;;
        "clean")
            warn "Isso ir√° remover TODOS os containers, volumes e imagens!"
            read -p "Tem certeza? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                log "Limpando tudo..."
                $DOCKER_COMPOSE_CMD down -v --rmi all
                docker system prune -f
                log "Limpeza conclu√≠da."
            fi
            exit 0
            ;;
        "help"|"-h"|"--help")
            echo "Uso: $0 [op√ß√£o]"
            echo
            echo "Op√ß√µes:"
            echo "  (vazio)     Iniciar servi√ßos em background"
            echo "  --build     Fazer build antes de iniciar"
            echo "  --foreground  Iniciar em foreground"
            echo "  stop         Parar servi√ßos"
            echo "  restart      Reiniciar servi√ßos"
            echo "  logs         Ver logs (opcional: servi√ßo espec√≠fico)"
            echo "  status       Ver status dos servi√ßos"
            echo "  clean        Limpar tudo (CUIDADO!)"
            echo "  help         Mostrar esta ajuda"
            echo
            exit 0
            ;;
    esac

    # Inicializa√ß√£o normal
    check_prerequisites
    setup_environment
    check_ports

    # Iniciar servi√ßos
    if [ "$1" = "--build" ] || [ "$1" = "-b" ]; then
        start_services --build
    elif [ "$1" = "--foreground" ] || [ "$1" = "-f" ]; then
        start_services --foreground
    else
        start_services
        wait_for_services
        show_access_info
    fi
}

# Executar fun√ß√£o principal
main "$@"